datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    username      String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    videos               Video[]
    playlists            Playlist[]
    profile              Profile?
    watchHistory         WatchHistory[]
    subscriptions        Subscription[]         @relation(name: "UserSubscriptions")
    channels             Subscription[]         @relation(name: "ChannelSubscriptions")
    VideoComment         VideoComment[]
    communityPost        CommunityPost[]
    communityPostComment CommunityPostComment[]

    @@index([email])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Profile {
    id          String               @id @default(uuid())
    owner       User                 @relation(fields: [ownerEmail], references: [email])
    ownerEmail  String               @unique
    firstName   String
    lastName    String?
    gender      GENDER?
    age         Int?
    bio         Json?
    location    String?
    website     String[]
    avatar      String?
    socialMedia SocialMediaAccounts?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SocialMediaAccounts {
    facebook String?
    twitter  String?
    linkedIn String?
    github   String?
    owner    Profile? @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId  String

    @@id([ownerId])
}

model Video {
    id            String         @id @default(uuid())
    title         String
    slug          String         @unique
    description   String?
    videoUrl      String
    thumbnailUrl  String
    published     Boolean        @default(false)
    views         Int            @default(0)
    duration      Int            @default(0)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    ownerId       String
    owner         User           @relation(fields: [ownerId], references: [id])
    tags          TagOnVideo[]
    likes         VideoLike[]
    comments      VideoComment[]
    playlistItems PlaylistItem[]
    category      Category       @relation(fields: [categoryId], references: [id])
    categoryId    Int
    WatchHistory  WatchHistory[]

    @@index([slug, ownerId])
}

model Tag {
    id         Int          @id @default(autoincrement())
    name       String       @unique
    tagOnVideo TagOnVideo[]
}

model TagOnVideo {
    video   Video  @relation(fields: [videoId], references: [id])
    videoId String
    tag     Tag    @relation(fields: [tagId], references: [id])
    tagId   Int

    @@id([videoId, tagId])
}

model Category {
    id    Int     @id @default(autoincrement())
    name  String  @unique
    video Video[]
}

model VideoLike {
    id        String   @default(uuid())
    ownerId   String
    videoId   String
    createdAt DateTime @default(now())
    video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@unique([ownerId, videoId])
}

model VideoComment {
    id              String             @id @default(uuid())
    text            String
    owner           User               @relation(fields: [ownerId], references: [id])
    ownerId         String
    videoId         String
    createdAt       DateTime           @default(now())
    video           Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)
    parentComment   VideoComment?      @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
    parentCommentId String?
    replies         VideoComment[]     @relation("CommentReplies")
    likes           VideoCommentLike[]

    @@index([videoId])
}

model VideoCommentLike {
    id           String       @default(uuid())
    ownerId      String
    commentId    String
    createdAt    DateTime     @default(now())
    videoComment VideoComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([ownerId, commentId])
}

model Playlist {
    id          String         @id @default(uuid())
    title       String
    description String?
    ownerId     String
    owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    videos      PlaylistItem[]
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

model PlaylistItem {
    id         String   @id @default(uuid())
    ownerId    String
    videoId    String
    playlistId String
    video      Video    @relation(fields: [videoId], references: [id])
    playlist   Playlist @relation(fields: [playlistId], references: [id])
}

model WatchHistory {
    id        String         @id @default(uuid())
    owner     User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    video     Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
    videoId   String
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    session   WatchSession[]

    @@unique([ownerId, videoId])
}

model WatchSession {
    id             String       @id @default(uuid())
    watchHistory   WatchHistory @relation(fields: [watchHistoryId], references: [id], onDelete: Cascade)
    watchHistoryId String
    watchedAt      DateTime     @default(now())
    duration       Float        @default(0)
    timestamp      Float        @default(0)
    device         DEVICE
    completed      Boolean      @default(false)
}

model Subscription {
    id        String   @id @default(uuid())
    user      User     @relation("UserSubscriptions", fields: [userId], references: [id])
    userId    String
    channel   User     @relation("ChannelSubscriptions", fields: [channelId], references: [id], onDelete: Cascade)
    channelId String
    createdAt DateTime @default(now())

    @@unique([userId, channelId])
}

model CommunityPost {
    id                   String                 @id @default(uuid())
    owner                User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId              String
    text                 String
    images               String[]
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    communityPostLike    CommunityPostLike[]
    communityPostComment CommunityPostComment[]
}

model CommunityPostLike {
    id            String        @default(uuid())
    ownerId       String
    communityId   String
    createdAt     DateTime      @default(now())
    communityPost CommunityPost @relation(fields: [communityId], references: [id], onDelete: Cascade)

    @@unique([ownerId, communityId])
}

model CommunityPostComment {
    id              String                 @id @default(uuid())
    text            String
    owner           User                   @relation(fields: [ownerId], references: [id])
    ownerId         String
    communityId     String
    createdAt       DateTime               @default(now())
    communityPost   CommunityPost          @relation(fields: [communityId], references: [id], onDelete: Cascade)
    parentComment   CommunityPostComment?  @relation("CommunityCommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
    parentCommentId String?
    replies         CommunityPostComment[] @relation("CommunityCommentReplies")
    likes           CommunityCommentLike[]

    @@index([communityId])
}

model CommunityCommentLike {
    id                 String               @default(uuid())
    ownerId            String
    communityCommentId String
    createdAt          DateTime             @default(now())
    communityComment   CommunityPostComment @relation(fields: [communityCommentId], references: [id], onDelete: Cascade)

    @@unique([ownerId, communityCommentId])
}

enum GENDER {
    MALE
    FEMALE
    NOT_SPECIFIED
}

enum DEVICE {
    DESKTOP
    MOBILE
    TABLET
}

enum CATEGORY {
    ENTER
    VLOGS
    TUTORIALS
    REVIEWS
    INTERVIEWS
    GAMING
    MUSIC_VIDEOS
    UNBOXINGS
    DIY_CRAFTS
    FITNESS
    COMEDY_SKITS
    TRAVEL
}
